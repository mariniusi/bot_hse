import pytest
from unittest.mock import Mock

from main import *
from main import but1
from main import but2
from main import text
from main import information
from main import but5
from main import but3
from main import but4


#–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@pytest.mark
def start_test():
    message = Mock()
    user(message)

    message.answer.assert_called_with(hello_text)
    message.answer.assert_called_with(get('https://i.pinimg.com/564x/59/f9/b2/59f9b2507ccd8bfcfd40a32f39a57373.jpg').content)


@pytest.mark
def menu_test1():
    message = '–Ω–∞—á–Ω–µ–º!'
    menu(message)

    message.answer.assert_called_with(main_menu_text)


@pytest.mark
def menu_test2():
    message = '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    menu(message)

    message.answer.assert_called_with(main_menu_text)

@pytest.mark
def menu_test3():
    message = '/start'
    menu(message)

    message.answer.assert_called_with('–°–µ–π—á–∞—Å –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!')

@pytest.mark
def menu_test3():
    message = Mock
    menu(message)

    message.answer.assert_called_with(mistake_text)


#–ø–æ–≥–æ–¥–∞
@pytest.mark
def pogoda_test():
    message = '–ø–æ–≥–æ–¥–∞ ‚õÖ'
    menu(message)

    message.answer.assert_called_with(get('https://i.pinimg.com/564x/0e/91/4d/0e914de3125362a619b969be10b291a7.jpg').content)
    message.answer.assert_called_with('–ü–æ–≥–æ–¥–∞ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è?')


@pytest.mark
def pogoda_test1():
    message = 'Moscow'
    menu(message)

    message.answer.assert_called_with(information)

@pytest.mark
def pogoda_test2():
    message = Mock
    get_weathers(message)

    message.answer.assert_called_with('‚ùó‚ùó–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å! ‚ùó‚ùó')

@pytest.mark
def pogoda_test3():
    message ='—Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥'
    next_step(message)

    message.answer.assert_called_with(pogoda(message))

@pytest.mark
def pogoda_test4():
    message ='–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    next_step(message)


    message.answer.assert_called_with(quit(message))

@pytest.mark
def pogoda_test4():
    next_step(message)
    message = Mock

    message.answer.assert_called_with('‚ùó‚ùó–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å! ‚ùó‚ùó')


#–ø–æ–º–æ—â—å
@pytest.mark
def help_test():
    message = '–ø–æ–º–æ—â—å üÜò'
    menu(message)

    message.answer.assert_called_with('–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É')


@pytest.mark
def help_test1():
    message = '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'
    help(message)

    message.answer.assert_called_with(text)

@pytest.mark
def help_test3():
    message = '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    help(message)

    message.answer.assert_called_with(quit(message))


@pytest.mark
def help_test4():
    message = Mock
    help(message)

    message.answer.assert_called_with('–û—à–∏–±–∫–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏')


#–≤–∞–ª—é—Ç—ã
@pytest.mark
def test_start():
    message = '–≤–∞–ª—é—Ç—ã üí∏'
    menu(message)

    message.answer.assert_called_with(get('https://i.pinimg.com/564x/91/d0/56/91d05626656a100f22c9fb3fdfa4ae34.jpg').content)
    message.answer.assert_called_with('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º) –≤ —Ç–æ–π –≤–∞–ª—é—Ç–µ, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ü§ë')


@pytest.mark
def test_start1():
    message = '–¥–æ–ª–ª–∞—Ä'
    summa_next(message)

    message.answer.assert_called_with(text)

@pytest.mark
def test_start2():
    message = '–µ–≤—Ä–æ'
    summa_next(message)

    message.answer.assert_called_with(text)


@pytest.mark
def test_start3():
    message = '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    summa_next(message)


    message.answer.assert_called_with(quit(message))

@pytest.mark
def test_start4():
    message = Mock
    summa_next(message)

    message.answer.assert_called_with('–ù–µ–≤–µ—Ä–Ω–æ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏!')

@pytest.mark
def test_start5():
    message = '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â–µ'
    step_on(message)

    message.answer.assert_called_with('https://i.pinimg.com/564x/91/d0/56/91d05626656a100f22c9fb3fdfa4ae34.jpg'.content)
    message.answer.assert_called_with('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º) –≤ —Ç–æ–π –≤–∞–ª—é—Ç–µ, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ü§ë')


@pytest.mark
def test_start6():
    message = '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    step_on(message)

    message.answer.assert_called_with(quit(message))

#–¥–µ–¥–ª–∞–π–Ω—ã
@pytest.mark
def dead_test():
    message = '–¥–µ–¥–ª–∞–π–Ω—ã üö©'
    menu(message)

    message.answer.assert_called_with('–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å?')

@pytest.mark
def dead_tes1():
    message = '–¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω'
    dead(message)

    message.answer.assert_called_with('–í–≤–µ–¥–∏ –∑–∞–¥–∞—á—É')

@pytest.mark
def dead_tes2():
    message = Mock
    dead2(message)

    message.answer.assert_called_with('–í–≤–µ–¥–∏ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞')

@pytest.mark
def dead_tes3():
    message = Mock
    dead2(message)

    message.answer.assert_called_with('–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')



@pytest.mark
def dead_tes4():
    message = '—É–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω'
    dead(message)

    message.answer.assert_called_with('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?')



@pytest.mark
def dead_tes5():
    message = '–æ—á–∏—Å—Ç–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã'
    delete(message)

    message.answer.assert_called_with('–°—É–ø–µ—Ä! - –≤—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã –æ—á–∏—â–µ–Ω—ã')



@pytest.mark
def dead_tes6():
    message = '–Ω–∞–∑–∞–¥'
    delete(message)


    message.answer.assert_called_with(get('https://i.pinimg.com/564x/df/e6/fd/dfe6fd9d64c7702febd24e50153525e3.jpg').content)
    message.answer.assert_called_with('–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å?')





































